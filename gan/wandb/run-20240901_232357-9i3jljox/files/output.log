C:\Users\UMI\Desktop\myenv\Lib\site-packages\keras\src\layers\core\dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.
  super().__init__(activity_regularizer=activity_regularizer, **kwargs)
C:\Users\UMI\Desktop\myenv\Lib\site-packages\keras\src\layers\activations\leaky_relu.py:41: UserWarning: Argument `alpha` is deprecated. Use `negative_slope` instead.
  warnings.warn(
C:\Users\UMI\Desktop\myenv\Lib\site-packages\keras\src\layers\reshaping\flatten.py:37: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.
  super().__init__(**kwargs)
[1m1/1[22m [32m━━━━━━━━━━━━━━━━━━━━[39m [1m0s[22m 69ms/step
WARNING:tensorflow:5 out of the last 5 calls to <function TensorFlowTrainer.make_train_function.<locals>.one_step_on_iterator at 0x0000024EC1D577E0> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has reduce_retracing=True option that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.
WARNING:tensorflow:6 out of the last 6 calls to <function TensorFlowTrainer.make_train_function.<locals>.one_step_on_iterator at 0x0000024EC35ADDA0> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has reduce_retracing=True option that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.
Epoch 0/10000 - D Loss Real: 0.36284732818603516 - D Loss Fake: 0.7387124300003052 - G Loss: [array(0.73871243, dtype=float32), array(0.73871243, dtype=float32)]
[1m1/1[22m [32m━━━━━━━━━━━━━━━━━━━━[39m [1m0s[22m 13ms/step
Epoch 1/10000 - D Loss Real: 0.527424156665802 - D Loss Fake: 0.6961959600448608 - G Loss: [array(0.69619596, dtype=float32), array(0.69619596, dtype=float32)]
[1m1/1[22m [32m━━━━━━━━━━━━━━━━━━━━[39m [1m0s[22m 14ms/step
Epoch 2/10000 - D Loss Real: 0.5713924169540405 - D Loss Fake: 0.6815027594566345 - G Loss: [array(0.68150276, dtype=float32), array(0.68150276, dtype=float32)]
[1m1/1[22m [32m━━━━━━━━━━━━━━━━━━━━[39m [1m0s[22m 13ms/step
Epoch 3/10000 - D Loss Real: 0.5891829133033752 - D Loss Fake: 0.6853403449058533 - G Loss: [array(0.68534034, dtype=float32), array(0.68534034, dtype=float32)]
[1m1/1[22m [32m━━━━━━━━━━━━━━━━━━━━[39m [1m0s[22m 17ms/step
Epoch 4/10000 - D Loss Real: 0.6116461753845215 - D Loss Fake: 0.6940593719482422 - G Loss: [array(0.6940594, dtype=float32), array(0.6940594, dtype=float32)]
[1m1/1[22m [32m━━━━━━━━━━━━━━━━━━━━[39m [1m0s[22m 14ms/step
Epoch 5/10000 - D Loss Real: 0.6328455805778503 - D Loss Fake: 0.704251766204834 - G Loss: [array(0.70425177, dtype=float32), array(0.70425177, dtype=float32)]
[1m1/1[22m [32m━━━━━━━━━━━━━━━━━━━━[39m [1m0s[22m 14ms/step
Epoch 6/10000 - D Loss Real: 0.6514003276824951 - D Loss Fake: 0.7123315930366516 - G Loss: [array(0.7123316, dtype=float32), array(0.7123316, dtype=float32)]
[1m1/1[22m [32m━━━━━━━━━━━━━━━━━━━━[39m [1m0s[22m 16ms/step
Epoch 7/10000 - D Loss Real: 0.6659348607063293 - D Loss Fake: 0.7321392893791199 - G Loss: [array(0.7321393, dtype=float32), array(0.7321393, dtype=float32)]
[1m1/1[22m [32m━━━━━━━━━━━━━━━━━━━━[39m [1m0s[22m 16ms/step
Epoch 8/10000 - D Loss Real: 0.6901669502258301 - D Loss Fake: 0.7383025884628296 - G Loss: [array(0.7383026, dtype=float32), array(0.7383026, dtype=float32)]
[1m1/1[22m [32m━━━━━━━━━━━━━━━━━━━━[39m [1m0s[22m 11ms/step
Epoch 9/10000 - D Loss Real: 0.6999323964118958 - D Loss Fake: 0.7578920125961304 - G Loss: [array(0.757892, dtype=float32), array(0.757892, dtype=float32)]
[1m1/1[22m [32m━━━━━━━━━━━━━━━━━━━━[39m [1m0s[22m 14ms/step
Epoch 10/10000 - D Loss Real: 0.7223365902900696 - D Loss Fake: 0.7698974609375 - G Loss: [array(0.76989746, dtype=float32), array(0.76989746, dtype=float32)]
[1m1/1[22m [32m━━━━━━━━━━━━━━━━━━━━[39m [1m0s[22m 16ms/step
Epoch 11/10000 - D Loss Real: 0.7365845441818237 - D Loss Fake: 0.7835184931755066 - G Loss: [array(0.7835185, dtype=float32), array(0.7835185, dtype=float32)]
[1m1/1[22m [32m━━━━━━━━━━━━━━━━━━━━[39m [1m0s[22m 13ms/step
Epoch 12/10000 - D Loss Real: 0.7526395320892334 - D Loss Fake: 0.7946507334709167 - G Loss: [array(0.79465073, dtype=float32), array(0.79465073, dtype=float32)]
[1m1/1[22m [32m━━━━━━━━━━━━━━━━━━━━[39m [1m0s[22m 16ms/step
Epoch 13/10000 - D Loss Real: 0.7657841444015503 - D Loss Fake: 0.80369633436203 - G Loss: [array(0.80369633, dtype=float32), array(0.80369633, dtype=float32)]
[1m1/1[22m [32m━━━━━━━━━━━━━━━━━━━━[39m [1m0s[22m 13ms/step
Epoch 14/10000 - D Loss Real: 0.7764386534690857 - D Loss Fake: 0.8106749653816223 - G Loss: [array(0.81067497, dtype=float32), array(0.81067497, dtype=float32)]
[1m1/1[22m [32m━━━━━━━━━━━━━━━━━━━━[39m [1m0s[22m 14ms/step
Epoch 15/10000 - D Loss Real: 0.7847670316696167 - D Loss Fake: 0.8246184587478638 - G Loss: [array(0.82461846, dtype=float32), array(0.82461846, dtype=float32)]
[1m1/1[22m [32m━━━━━━━━━━━━━━━━━━━━[39m [1m0s[22m 13ms/step
Epoch 16/10000 - D Loss Real: 0.7997667193412781 - D Loss Fake: 0.8305633068084717 - G Loss: [array(0.8305633, dtype=float32), array(0.8305633, dtype=float32)]
[1m1/1[22m [32m━━━━━━━━━━━━━━━━━━━━[39m [1m0s[22m 16ms/step
Epoch 17/10000 - D Loss Real: 0.8069719076156616 - D Loss Fake: 0.8407027721405029 - G Loss: [array(0.8407028, dtype=float32), array(0.8407028, dtype=float32)]
[1m1/1[22m [32m━━━━━━━━━━━━━━━━━━━━[39m [1m0s[22m 9ms/step
Traceback (most recent call last):
  File "C:\Users\UMI\Desktop\gan\gan.py", line 111, in <module>
    train_gan()
  File "C:\Users\UMI\Desktop\gan\gan.py", line 80, in train_gan
    g_loss = gan.train_on_batch(np.random.normal(0, 1, (batch_size, config.latent_dim)), np.ones((batch_size, 1)))
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\UMI\Desktop\myenv\Lib\site-packages\keras\src\backend\tensorflow\trainer.py", line 551, in train_on_batch
    logs = self.train_function(data())
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\UMI\Desktop\myenv\Lib\site-packages\tensorflow\python\util\traceback_utils.py", line 150, in error_handler
    return fn(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^
  File "C:\Users\UMI\Desktop\myenv\Lib\site-packages\tensorflow\python\eager\polymorphic_function\polymorphic_function.py", line 833, in __call__
    result = self._call(*args, **kwds)
             ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\UMI\Desktop\myenv\Lib\site-packages\tensorflow\python\eager\polymorphic_function\polymorphic_function.py", line 878, in _call
    results = tracing_compilation.call_function(
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\UMI\Desktop\myenv\Lib\site-packages\tensorflow\python\eager\polymorphic_function\tracing_compilation.py", line 139, in call_function
    return function._call_flat(  # pylint: disable=protected-access
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\UMI\Desktop\myenv\Lib\site-packages\tensorflow\python\eager\polymorphic_function\concrete_function.py", line 1322, in _call_flat
    return self._inference_function.call_preflattened(args)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\UMI\Desktop\myenv\Lib\site-packages\tensorflow\python\eager\polymorphic_function\atomic_function.py", line 216, in call_preflattened
    flat_outputs = self.call_flat(*args)
                   ^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\UMI\Desktop\myenv\Lib\site-packages\tensorflow\python\eager\polymorphic_function\atomic_function.py", line 251, in call_flat
    outputs = self._bound_context.call_function(
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\UMI\Desktop\myenv\Lib\site-packages\tensorflow\python\eager\context.py", line 1552, in call_function
    outputs = execute.execute(
              ^^^^^^^^^^^^^^^^
  File "C:\Users\UMI\Desktop\myenv\Lib\site-packages\tensorflow\python\eager\execute.py", line 53, in quick_execute
    tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
KeyboardInterrupt